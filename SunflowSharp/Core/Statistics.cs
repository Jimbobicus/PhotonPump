// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using SunflowSharp.Systems;

namespace SunflowSharp.Core
{
	public class Statistics {
		// raytracing
		private Int64 numEyeRays;
		private Int64 numShadowRays;
		private Int64 numReflectionRays;
		private Int64 numGlossyRays;
		private Int64 numRefractionRays;
		private Int64 numRays;
		private Int64 numPixels;
		// shading cache
		private Int64 cacheHits;
		private Int64 cacheMisses;
		private Int64 cacheSumDepth;
		private Int64 cacheNumCaches;
		
		public Statistics() {
			reset();
		}
		
		public void reset() {
			numEyeRays = 0;
			numShadowRays = 0;
			numReflectionRays = 0;
			numGlossyRays = 0;
			numRefractionRays = 0;
			numRays = 0;
			numPixels = 0;
			cacheHits = 0;
			cacheMisses = 0;
			cacheSumDepth = 0;
			cacheNumCaches = 0;
		}
		
		public void accumulate(IntersectionState state) {
			numEyeRays += state.numEyeRays;
			numShadowRays += state.numShadowRays;
			numReflectionRays += state.numReflectionRays;
			numGlossyRays += state.numGlossyRays;
			numRefractionRays += state.numRefractionRays;
			numRays += state.numRays;
		}
		
		public void accumulate(ShadingCache cache) {
			cacheHits += cache.hits;
			cacheMisses += cache.misses;
			cacheSumDepth += cache.sumDepth;
			cacheNumCaches += cache.numCaches;
		}
		
		public void setResolution(int w, int h) {
			numPixels = w * h;
		}
		
		public void displayStats() {
			// display raytracing stats
			UI.printInfo(UI.Module.SCENE, "Raytracing stats:");
			UI.printInfo(UI.Module.SCENE, " * Rays traced: (per pixel) (per eye ray) (percentage)", numRays);
			printRayTypeStats("eye", numEyeRays);
			printRayTypeStats("shadow", numShadowRays);
			printRayTypeStats("reflection", numReflectionRays);
			printRayTypeStats("glossy", numGlossyRays);
			printRayTypeStats("refraction", numRefractionRays);
			printRayTypeStats("other", numRays - numEyeRays - numShadowRays - numReflectionRays - numGlossyRays - numRefractionRays);
			printRayTypeStats("total", numRays);
			if (cacheHits + cacheMisses > 0) {
				UI.printInfo(UI.Module.LIGHT, "Shading cache stats:");
				UI.printInfo(UI.Module.LIGHT, " * Lookups: {0}", cacheHits + cacheMisses);
				UI.printInfo(UI.Module.LIGHT, " * Hits: {0}", cacheHits);
				UI.printInfo(UI.Module.LIGHT, " * Hit rate: {0}%", (100 * cacheHits) / (cacheHits + cacheMisses));
				UI.printInfo(UI.Module.LIGHT, " * Average cache depth: {0}", (double) cacheSumDepth / (double) cacheNumCaches);
			}
		}
		
		private void printRayTypeStats(String name, Int64 n) {
			if (n > 0)
				UI.printInfo(UI.Module.SCENE, " {0,-10} {1,11} {2,10:0.00} {3,10:0.00} {3,9:0.00}", name, n, (double) n / (double) numPixels, (double) n / (double) numEyeRays, (double) (n * 100) / (double) numRays);
		}
	}
}

