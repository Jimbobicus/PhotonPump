// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;

namespace SunflowSharp.Image.Writers
{
	/**
* Writes images in Indigo's native XYZ format.
* http://www2.indigorenderer.com/joomla/forum/viewtopic.php?p=11430
*/
	public class IGIBitmapWriter : BitmapWriter {
		private String filename;
		private int width, height;
		private float[] xyz;
		
		public override void configure(string option, string value) {
		}
		
		public override void openFile(string filename) {
			this.filename = filename;
		}
		
		public override void writeHeader(int width, int height, int tileSize) {
			this.width = width;
			this.height = height;
			xyz = new float[width * height * 3];
		}
		
		public override void writeTile(int x, int y, int w, int h, Color[] color, float[] alpha) {
			for (int j = 0, index = 0, pixel = 3 * (x + y * width); j < h; j++, pixel += 3 * (width - w)) {
				for (int i = 0; i < w; i++, index++, pixel += 3) {
					XYZColor c = Color.NATIVE_SPACE.convertRGBtoXYZ(color[index]);
					xyz[pixel + 0] = c.getX();
					xyz[pixel + 1] = c.getY();
					xyz[pixel + 2] = c.getZ();
				}
			}
		}
		
		public override void closeFile() {
			FileStream stream = new FileStream(filename, FileMode.Create);
			write32(stream, 66613373); // magic number
			write32(stream, 1); // version
			write32(stream, 0); // this should be a double - assume it won't be used
			write32(stream, 0);
			write32(stream, width);
			write32(stream, height);
			write32(stream, 1); // super sampling factor
			write32(stream, 0); // compression
			write32(stream, width * height * 12); // data size
			write32(stream, 0); // colorspace
			stream.Write(new byte[5000], 0, 5000);
			foreach (float f in xyz)
				write32(stream, f);
			stream.Close();
		}
		
		private static void write32(FileStream stream, int i) {
			stream.WriteByte((byte)(i & 0xFF));
			stream.WriteByte((byte)((i >> 8) & 0xFF));
			stream.WriteByte((byte)((i >> 16) & 0xFF));
			stream.WriteByte((byte)((i >> 24) & 0xFF));
		}
		
		private static void write32(FileStream stream, float f) {
			byte[] b = BitConverter.GetBytes (f);
			stream.Write(b, 0, b.Length);
		}
	}
}

